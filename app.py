import streamlit as st
import tensorflow as tf
from PIL import Image
import pandas as pd
import numpy as np
from tensorflow.keras.models import load_model
import requests
from io import BytesIO
import sqlite3
import os
import altair as alt

# CSS for styling the app
st.markdown(
    """
    <style>
    .stApp {
        background-color: #333333;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Header section
st.markdown('<div style="display: flex; justify-content: flex-end; margin-top:-70px"><img src="https://i.pinimg.com/originals/4a/73/1f/4a731f6a5480f6ee8b9bfb34168c333b.gif" alt="GIF" width="100%" style="max-width: 400px; margin-right: 160px;"></div>', unsafe_allow_html=True)
st.markdown('<p style="background-color: #8a4baf; color: white; font-size: 29px; padding: 20px; border-radius: 10px; text-align: center; box-shadow: 0px 6px 8px rgba(0, 0, 0, 0.1);">üåª–Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–≤—ñ—Ç—ñ–≤üåª</p>', unsafe_allow_html=True)
# st.markdown('<p style="background-color: #8a4baf; color: white; font-size: 20px; padding: 10px; border-radius: 5px; text-align: center; box-shadow: 0px 2px 3px rgba(0, 0, 0, 0.1);">üíê–¢–∏–ø–∏ –∫–≤—ñ—Ç—ñ–≤üíê</p>', unsafe_allow_html=True)
# st.image("image.png", use_column_width=True)

# Sidebar for image upload method
st.sidebar.title("–ú–µ—Ç–æ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
upload_method = st.sidebar.radio("–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", ["–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ", "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ç–æ"])

uploaded_image = None  # To store the image uploaded by the user

if upload_method == "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ":
    # Upload image from user
    uploaded_image = st.file_uploader("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–≤—ñ—Ç–∫–∏:", type=["jpg", "png", "jpeg"])
elif upload_method == "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ç–æ":
    # Get internet link from user
    st.write("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–≤—ñ—Ç–∫–∏:")
    image_url = st.text_input("–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")

# Sidebar for model selection
st.sidebar.title("–í–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ")
selected_model = st.sidebar.radio("–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", ["CNN_model", "VGG16_model", "ResNet_model", "Xception_model", "NASNetMobile_model"])

# Upload image and guess buttons
if uploaded_image is not None or (upload_method == "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ç–æ" and image_url):
    st.markdown('<p style="background-color: #8a4baf; color: white; font-size: 20px; padding: 10px; border-radius: 5px; text-align: center; box-shadow: 0px 2px 3px rgba(0, 0, 0, 0.1);">üåº–í–∞—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–µ–Ω—èüåº</p>', unsafe_allow_html=True)
    if uploaded_image is not None:
        st.image(uploaded_image, caption='', use_column_width=True)
    elif upload_method == "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ç–æ" and image_url:
        try:
            response = requests.get(image_url)
            image = Image.open(BytesIO(response.content))
            st.image(image, caption='', use_column_width=True)
        except Exception as e:
            st.error("An error occurred while loading the image. Please enter a valid internet link.")

# Model information button
if st.sidebar.button("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–æ–¥–µ–ª—å"):
    st.markdown(f'<p style="background-color: #8a4baf; color: white; font-size: 20px; padding: 10px; border-radius: 5px; text-align: center; box-shadow: 0px 2px 3px rgba(0, 0, 0, 0.1);">üå∑{selected_model}üå∑</p>', unsafe_allow_html=True)
    if selected_model == "CNN_model":
        st.write("CNN_model - —Ü–µ –±–∞–∑–æ–≤–∞ –º–æ–¥–µ–ª—å –∑–≥–æ—Ä—Ç–∫–æ–≤–æ—ó –Ω–µ–π—Ä–æ–Ω–Ω–æ—ó –º–µ—Ä–µ–∂—ñ (CNN). –í–æ–Ω–∞ –º—ñ—Å—Ç–∏—Ç—å –∑–≥–æ—Ä—Ç–∫–æ–≤—ñ —à–∞—Ä–∏, –æ–±'—î–¥–Ω–∞–Ω—ñ —à–∞—Ä–∏ —Ç–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑'—î–¥–Ω–∞–Ω—ñ —à–∞—Ä–∏. –ß–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –±–∞–∑–æ–≤–∏—Ö –∑–∞–¥–∞—á –≤—ñ–∑—É–∞–ª—å–Ω–æ—ó –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
    elif selected_model == "VGG16_model":
        st.write("VGG16_model - —Ü–µ 16-—à–∞—Ä–æ–≤–∞ –º–æ–¥–µ–ª—å –≥–ª–∏–±–æ–∫–æ—ó –∑–≥–æ—Ä—Ç–∫–æ–≤–æ—ó –Ω–µ–π—Ä–æ–Ω–Ω–æ—ó –º–µ—Ä–µ–∂—ñ. –ú—ñ—Å—Ç–∏—Ç—å –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ –∑–≥–æ—Ä—Ç–∫–æ–≤—ñ —Ç–∞ –æ–±'—î–¥–Ω—É—é—á—ñ —à–∞—Ä–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ç–∞–∫–∏—Ö –∑–∞–¥–∞—á, —è–∫ –≤—ñ–∑—É–∞–ª—å–Ω–∞ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤.")
    elif selected_model == "ResNet_model":
        st.write("ResNet_model - —Ü–µ –º–æ–¥–µ–ª—å –≥–ª–∏–±–æ–∫–æ—ó –∑–≥–æ—Ä—Ç–∫–æ–≤–æ—ó –Ω–µ–π—Ä–æ–Ω–Ω–æ—ó –º–µ—Ä–µ–∂—ñ, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∑–∞–ª–∏—à–∫–æ–≤—ñ –±–ª–æ–∫–∏ –¥–ª—è –ø–æ–ª–µ–≥—à–µ–Ω–Ω—è –Ω–∞–≤—á–∞–Ω–Ω—è –≥–ª–∏–±–æ–∫–∏—Ö –º–µ—Ä–µ–∂. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–∞–≤—á–∞–Ω–Ω—è –≥–ª–∏–±–∏–Ω–Ω–∏—Ö –º–µ—Ä–µ–∂.")
    elif selected_model == "Xception_model":
        st.write("–ú–æ–¥–µ–ª—å Xception: Xception - —Ü–µ –º–æ–¥–µ–ª—å, —è–∫–∞ –¥–æ–∫–æ—Ä—ñ–Ω–Ω–æ –∑–º—ñ–Ω—é—î –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É –∑–≥–æ—Ä—Ç–∫–æ–≤–∏—Ö –Ω–µ–π—Ä–æ–Ω–Ω–∏—Ö –º–µ—Ä–µ–∂. –í–æ–Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–∏—Ç—è–≥—É—î –æ–∑–Ω–∞–∫–∏ —ñ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
    elif selected_model == "NASNetMobile_model":
        st.write("–ú–æ–¥–µ–ª—å NASNetMobile: NASNetMobile - —Ü–µ –º–æ–¥–µ–ª—å, —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∞ —à–ª—è—Ö–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è –ª–µ–≥–∫–∏—Ö —ñ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤. –í–æ–Ω–∞ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫—ñ–≤ —ñ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤.")

# Make a guess button
if st.button("–í–∏–∑–Ω–∞—á–∏—Ç–∏"):
    if upload_method == "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ" and uploaded_image is not None:
        image = Image.open(uploaded_image)
    elif upload_method == "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ç–æ" and image_url:
        try:
            response = requests.get(image_url)
            image = Image.open(BytesIO(response.content))
        except Exception as e:
            st.error("An error occurred while loading the image. Please enter a valid internet link.")

    # Load the model based on the model selected by the user
    model_paths = {
        "CNN_model": 'CNN_model_updated2.h5',
        "VGG16_model": 'VGG16_model_updated2.h5',
        "ResNet_model": 'ResNet50_model_updated2.h5',  # Ensure this is correct
        "Xception_model": 'Xception_model_updated2.h5',
        "NASNetMobile_model": 'NASNetMobile_model_updated2.h5'
    }

    model_path = model_paths.get(selected_model)
    if model_path and os.path.exists(model_path):
        model = tf.keras.models.load_model(model_path, compile=False)
    else:
        st.error(f"Model file {model_path} does not exist.")

    # Prepare the image for the model and make predictions
    if 'image' in locals():
        image = image.resize((224, 224))
        image = tf.keras.preprocessing.image.img_to_array(image)
        image = image / 255.0
        image = np.expand_dims(image, axis=0)

        # Make a guess
        prediction = model.predict(image)

        # Show prediction results
        class_names = ["alpine sea holly", "anthurium", "artichoke", "azalea", "balloon flower", "barberton daisy", "bee balm", "bird of paradise", "bishop of llandaff", "black-eyed susan", "blackberry lily", "blanket flower", "bolero deep blue", "bougainvillea", "bromelia", "buttercup", "californian poppy", "camellia", "canna lily", "canterbury bells", "cape flower", "carnation", "cautleya spicata", "clematis", "colt's foot", "columbine", "common dandelion", "common tulip", "corn poppy", "cosmos", "cyclamen", "daffodil", "daisy", "desert-rose", "fire lily", "foxglove", "frangipani", "fritillary", "garden phlox", "gaura", "gazania", "geranium", "giant white arum lily", "globe thistle", "globe-flower", "grape hyacinth", "great masterwort", "hard-leaved pocket orchid", "hibiscus", "hippeastrum", "iris", "japanese anemone", "king protea", "lenten rose", "lilac hibiscus", "lotus", "love in the mist", "magnolia", "mallow", "marigold", "mexican petunia", "monkshood", "moon orchid", "morning glory", "orange dahlia", "osteospermum", "passion flower", "peruvian lily", "petunia", "pincushion flower", "pink primrose", "pink quill", "pink-yellow dahlia", "poinsettia", "primula", "prince of wales feathers", "purple coneflower", "red ginger", "rose", "ruby-lipped cattleya", "siam tulip", "silverbush", "snapdragon", "spear thistle", "spring crocus", "stemless gentian", "sunflower", "sweet pea", "sweet william", "sword lily", "thorn apple", "tiger lily", "toad lily", "tree mallow", "tree poppy", "trumpet creeper", "wallflower", "water lily", "watercress", "wild geranium", "wild pansy", "wild rose", "windflower", "yellow iris"]
        predicted_class = class_names[np.argmax(prediction)]
        confidence = np.max(prediction)

        st.markdown(f'<p style="background-color: #8a4baf; color: white; font-size: 20px; padding: 10px; border-radius: 5px; text-align: center; box-shadow: 0px 2px 3px rgba(0, 0, 0, 0.1);">üå∑–ú–æ–¥–µ–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞üå∑</p>', unsafe_allow_html=True)
        st.write(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è: {predicted_class}")
        st.write(f"–¢–æ—á–Ω—ñ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è: {confidence:.2f}")

        # st.markdown('<p style="background-color: #8a4baf; color: white; font-size: 20px; padding: 10px; border-radius: 5px; text-align: center; box-shadow: 0px 2px 3px rgba(0, 0, 0, 0.1);">üìä –ô–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è üìä</p>', unsafe_allow_html=True)
        # prediction_df = pd.DataFrame({'–¢–∏–ø–∏ –∫–≤—ñ—Ç—ñ–≤': class_names, 'Possibilities': prediction[0]})
        # st.bar_chart(prediction_df.set_index('–¢–∏–ø–∏ –∫–≤—ñ—Ç—ñ–≤')),

        # –ü–æ—Ä—ñ–≥ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π
        threshold = 0.05

#############################################

        st.markdown(
    '<p style="background-color: #8a4baf; color: white; font-size: 10px; padding: 10px; border-radius: 5px; text-align: center; box-shadow: 0px 2px 3px rgba(0, 0, 0, 0.1);">üìä –ô–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è üìä</p>',
        unsafe_allow_html=True
        )

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è DataFrame –∑ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
        prediction_df = pd.DataFrame({'–¢–∏–ø–∏ –∫–≤—ñ—Ç—ñ–≤': class_names, '–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å': prediction[0]})

# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è DataFrame –∑–∞ –ø–æ—Ä–æ–≥–æ–º
        filtered_df = prediction_df[prediction_df['–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å'] > threshold]

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É
        st.bar_chart(filtered_df.set_index('–¢–∏–ø–∏ –∫–≤—ñ—Ç—ñ–≤'))
######################################


# Connect to the SQLite database
conn = sqlite3.connect('database.db')
c = conn.cursor()

# Create the FlowerTable if it doesn't exist
c.execute('''CREATE TABLE IF NOT EXISTS FlowerTable 
             (id INTEGER PRIMARY KEY AUTOINCREMENT, flower_id INTEGER, flower_name TEXT, flower_date TEXT, add_note TEXT)''')
conn.commit()

# Create the flowers table if it doesn't exist
c.execute('''CREATE TABLE IF NOT EXISTS flowers 
             (id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Location TEXT, Note TEXT, status TEXT)''')
conn.commit()

def issue_flower_form():
    st.header("–ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–≤—ñ—Ç–∫—É")

    flower_options = [row[0] for row in c.execute("SELECT Name FROM flowers WHERE status = 'Available'")]
    flower_Name = st.selectbox("–ù–∞–∑–≤–∞ –∫–≤—ñ—Ç–∫–∏:", flower_options)

    users_options = [row[0] for row in c.execute("SELECT name FROM users")]
    users_name = st.selectbox("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", users_options)

    flower_date = st.date_input("–î–∞—Ç–∞ –≤–∏–ø—É—Å–∫—É:")
    add_note = st.date_input("–¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:")
    submit_button = st.button("–ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–≤—ñ—Ç–∫—É")

    if submit_button:
        issue_flower(flower_Name, users_name, flower_date, add_note)
        st.success(f"{flower_Name} has been issued to {users_name} until {add_note}.")

def issue_flower(flower_Name, users_name, flower_date, add_note):
    c.execute("SELECT id FROM flowers WHERE Name = ?", (flower_Name,))
    flower_id = c.fetchone()[0]
    c.execute("UPDATE flowers SET status = 'issued' WHERE Name = ?", (flower_Name,))
    c.execute("INSERT INTO FlowerTable (flower_id, flower_name, flower_date, add_note) VALUES (?, ?, ?, ?)",
              (flower_id, users_name, flower_date, add_note))
    conn.commit()

def users_registration():
    st.header("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    name = st.text_input("–Ü–º'—è:")
    email = st.text_input("Email:")
    address = st.text_input("–ê–¥—Ä–µ—Å–∞:")
    submit_button = st.button("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏")

    if submit_button:
        register_users(name, email, address)
        st.success("User registered successfully.")

def register_users(name, email, address):
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY, name TEXT, email TEXT, address TEXT)''')
    c.execute("INSERT INTO users (name, email, address) VALUES (?, ?, ?)", (name, email, address))
    conn.commit()

def view_users():
    c.execute('''SELECT FlowerTable.id, flowers.Name, FlowerTable.flower_name, FlowerTable.flower_date, FlowerTable.add_note 
                 FROM FlowerTable INNER JOIN flowers ON FlowerTable.flower_id = flowers.id''')
    data = c.fetchall()
    if data:
        st.write("–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:")
        df = pd.DataFrame(data, columns=["ID", "Flower Name", "User Name", "Issue Date", "Due Date"])
        st.table(df)
    else:
        st.warning("No users found.")

class Flower:
    def __init__(self, Name, Location, Note, status):
        self.Name = Name
        self.Location = Location
        self.Note = Note
        self.status = status

def add_flower(Name, Location, Note, status):
    flower = Flower(Name, Location, Note, status)
    c.execute("INSERT INTO flowers (Name, Location, Note, status) VALUES (?, ?, ?, ?)", 
              (flower.Name, flower.Location, flower.Note, flower.status))
    conn.commit()

def search_flowers(query):
    c.execute("SELECT * FROM flowers WHERE Name LIKE ? OR Location LIKE ? OR Note LIKE ?", 
              ('%'+query+'%', '%'+query+'%', '%'+query+'%'))
    flowers = c.fetchall()
    return flowers

def delete_flower(Name):
    c.execute('DELETE FROM flowers WHERE Name = ?', (Name,))
    conn.commit()
    st.success('Flower deleted')

def view_flowers():
    c.execute('SELECT * FROM flowers')
    flowers = c.fetchall()
    if not flowers:
        st.write("No flowers found.")
    else:
        flower_table = [[flower[0], flower[1], flower[2], flower[3], flower[4]] for flower in flowers]
        headers = ["ID", "Name", "Location", "Note", "Status"]
        flower_df = pd.DataFrame(flower_table, columns=headers)
        st.write(flower_df.to_html(escape=False), unsafe_allow_html=True)

def get_all_flowers():
    c.execute("SELECT * FROM flowers")
    flowers = c.fetchall()
    return flowers

def view_users_with_flower():
    c.execute('''SELECT FlowerTable.id, flowers.Name, FlowerTable.flower_name, FlowerTable.flower_date, FlowerTable.add_note 
                 FROM FlowerTable INNER JOIN flowers ON FlowerTable.flower_id = flowers.id''')
    data = c.fetchall()
    if data:
        st.write("–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:")
        df = pd.DataFrame(data, columns=["ID", "Flower Name", "User Name", "Issue Date", "Due Date"])
        st.table(df)
    else:
        st.warning("No users found.")

def main():
    st.title("–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–≤—ñ—Ç–∞–º–∏")

    menu = ["–î–æ–¥–∞—Ç–∏ –∫–≤—ñ—Ç–∫—É", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–≤—ñ—Ç–∏", "–®—É–∫–∞—Ç–∏ –∫–≤—ñ—Ç–∏", "–í–∏–¥–∞–ª–∏—Ç–∏ –∫–≤—ñ—Ç–∫—É", "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "–ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–≤—ñ—Ç–∫—É"]
    choice = st.sidebar.selectbox("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é", menu)

    if choice == "–î–æ–¥–∞—Ç–∏ –∫–≤—ñ—Ç–∫—É":
        st.subheader("–î–æ–¥–∞—Ç–∏ –∫–≤—ñ—Ç–∫—É")
        Name = st.text_input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–≤—ñ—Ç–∫–∏")
        Location = st.text_input("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è")
        Note = st.text_input("–í–≤–µ–¥—ñ—Ç—å –ü—Ä–∏–º—ñ—Ç–∫—É")
        status = "Available"
        if st.button("–î–æ–¥–∞—Ç–∏"):
            add_flower(Name, Location, Note, status)
            st.success("Flower added.")
    elif choice == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–≤—ñ—Ç–∏":
        st.subheader("–°–ø–∏—Å–æ–∫ –∫–≤—ñ—Ç—ñ–≤")
        flowers = get_all_flowers()
        if not flowers:
            st.write("No flowers found.")
        else:
            flower_table = [[flower[0], flower[1], flower[2], flower[3], flower[4]] for flower in flowers]
            headers = ["ID", "Name", "Location", "Note", "Status"]
            flower_df = pd.DataFrame(flower_table, columns=headers)
            st.write(flower_df.to_html(escape=False), unsafe_allow_html=True)
    elif choice == "–®—É–∫–∞—Ç–∏ –∫–≤—ñ—Ç–∏":
        st.subheader("–®—É–∫–∞—Ç–∏ –∫–≤—ñ—Ç–∏")
        query = st.text_input("–í–≤–µ–¥—ñ—Ç—å –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç")
        search_button = st.button("–®—É–∫–∞—Ç–∏")
        if query and search_button:
            flowers = search_flowers(query)
            if not flowers:
                st.write("No flowers found.")
            else:
                flower_table = [[flower[0], flower[1], flower[2], flower[3], flower[4]] for flower in flowers]
                headers = ["ID", "Name", "Location", "Note", "Status"]
                flower_df = pd.DataFrame(flower_table, columns=headers)
                st.write(flower_df.to_html(escape=False), unsafe_allow_html=True)
    elif choice == "–í–∏–¥–∞–ª–∏—Ç–∏ –∫–≤—ñ—Ç–∫—É":
        st.header("–í–∏–¥–∞–ª–∏—Ç–∏ –∫–≤—ñ—Ç–∫—É")
        Name = st.text_input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–≤—ñ—Ç–∫–∏, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:")
        delete_button = st.button("–í–∏–¥–∞–ª–∏—Ç–∏")
        st.subheader("–°–ø–∏—Å–æ–∫ –∫–≤—ñ—Ç—ñ–≤")
        view_flowers()
        if Name and delete_button:
            delete_flower(Name)
            st.success(f"{Name} has been deleted from the library.")
    elif choice == "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤":
        users_registration()
    elif choice == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤":
        view_users_with_flower()
    elif choice == "–ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–≤—ñ—Ç–∫—É":
        issue_flower_form()

if __name__ == "__main__":
    main()

